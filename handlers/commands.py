from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
import logging
from config import ADMIN_ID
from utils import filters
from utils.commands_db import CommandsDB

router = Router()
db = CommandsDB("./data/commands.db")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddCommand(StatesGroup):
    waiting_for_name = State()
    waiting_for_command = State()

# –°–±–æ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def build_commands_keyboard():
    commands = db.list_commands()
    buttons = [
         [InlineKeyboardButton(text="üî¥ –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="delete_command")]
        ,[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="add_command")]]
    for name in commands.keys():
        buttons.append([InlineKeyboardButton(text=name, callback_data=f"exec:{name}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –•–µ–Ω–¥–ª–µ—Ä "–∫–æ–º–∞–Ω–¥—ã"
@router.message(filters.IsAdmin(ADMIN_ID), F.text.lower() == "–∫–æ–º–∞–Ω–¥—ã")
async def command_list(message: types.Message):
    logging.info("–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
    keyboard = build_commands_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:", reply_markup=keyboard)

# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
@router.callback_query(F.data.startswith("exec:"))
async def execute_command(callback: CallbackQuery):
    name = callback.data.split(":", 1)[1]
    command = db.get_command(name)

    if not command:
        await callback.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    import subprocess
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=10)
        output = result.stdout.strip() or result.stderr.strip() or "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
    except Exception as e:
        output = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"

    await callback.answer("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.", show_alert=False)
    await callback.message.answer(f"üì¶ <b>{name}</b>\n<pre>{output}</pre>", parse_mode="HTML")

# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
@router.callback_query(F.data == "add_command")
async def ask_command_name(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddCommand.waiting_for_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–∏–º—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã</b>:", parse_mode="HTML")
    await callback.answer()

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã
@router.message(AddCommand.waiting_for_name)
async def receive_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(AddCommand.waiting_for_command)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã</b>:", parse_mode="HTML")

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
@router.message(AddCommand.waiting_for_command)
async def receive_command(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data["name"]
    command = message.text.strip()

    if db.add_command(name, command):
        await message.answer(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞.", parse_mode="HTML")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.", parse_mode="HTML")

    await state.clear()


class DeleteCommand(StatesGroup):
    waiting_for_name = State()

@router.callback_query(F.data == "delete_command")
async def ask_delete_name(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeleteCommand.waiting_for_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
    await callback.answer()

@router.message(DeleteCommand.waiting_for_name)
async def receive_delete_name(message: types.Message, state: FSMContext):
    name = message.text.strip()

    if db.delete_command(name):
        await message.answer(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ <b>{name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", parse_mode="HTML")
    else:
        await message.answer(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")

    await state.clear()
